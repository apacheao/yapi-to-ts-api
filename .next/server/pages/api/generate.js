"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/generate";
exports.ids = ["pages/api/generate"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgenerate.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgenerate.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/generate.ts */ \"(api)/./pages/api/generate.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/generate\",\n        pathname: \"/api/generate\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_generate_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmdlbmVyYXRlJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZnZW5lcmF0ZS50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNvRDtBQUNwRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsbURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLG1EQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3lhcGktdG8tdHMtYXBpLz9kYjZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZ2VuZXJhdGUudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9nZW5lcmF0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dlbmVyYXRlXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgenerate.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/generate.ts":
/*!*******************************!*\
  !*** ./pages/api/generate.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _src_generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/generator */ \"(api)/./src/generator.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_generator__WEBPACK_IMPORTED_MODULE_0__]);\n_src_generator__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst config = {\n    api: {\n        bodyParser: {\n            sizeLimit: \"1mb\"\n        }\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"只允许POST请求\"\n        });\n    }\n    try {\n        console.log(\"收到请求数据:\", req.body);\n        const { baseUrl, interfaceId, path, token } = req.body;\n        if (!baseUrl || !interfaceId || !path) {\n            return res.status(400).json({\n                error: \"缺少必要参数\"\n            });\n        }\n        const outputPath = \"./generated\";\n        const generator = new _src_generator__WEBPACK_IMPORTED_MODULE_0__.APIGenerator({\n            baseUrl,\n            interfaceId,\n            path,\n            token,\n            outputPath\n        });\n        const result = await generator.generate();\n        res.status(200).json({\n            success: true,\n            data: result\n        });\n    } catch (error) {\n        console.error(\"生成失败:\", error);\n        if (error instanceof Error) {\n            return res.status(500).json({\n                error: `生成失败: ${error.message}`\n            });\n        }\n        return res.status(500).json({\n            error: \"生成失败: 未知错误\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZ2VuZXJhdGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ21EO0FBRTVDLE1BQU1DLFNBQVM7SUFDcEJDLEtBQUs7UUFDSEMsWUFBWTtZQUNWQyxXQUFXO1FBQ2I7SUFDRjtBQUNGLEVBQUU7QUFFYSxlQUFlQyxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxJQUFJRCxJQUFJRSxNQUFNLEtBQUssUUFBUTtRQUN6QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLE9BQU87UUFBWTtJQUNuRDtJQUVBLElBQUk7UUFDRkMsUUFBUUMsR0FBRyxDQUFDLFdBQVdQLElBQUlRLElBQUk7UUFFL0IsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFdBQVcsRUFBRUMsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBR1osSUFBSVEsSUFBSTtRQUV0RCxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsZUFBZSxDQUFDQyxNQUFNO1lBQ3JDLE9BQU9WLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU87WUFBUztRQUNoRDtRQUVBLE1BQU1RLGFBQWE7UUFFbkIsTUFBTUMsWUFBWSxJQUFJcEIsd0RBQVlBLENBQUM7WUFDakNlO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQSxNQUFNRSxTQUFTLE1BQU1ELFVBQVVFLFFBQVE7UUFFdkNmLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFDbkJhLFNBQVM7WUFDVEMsTUFBTUg7UUFDUjtJQUNGLEVBQUUsT0FBT1YsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsU0FBU0E7UUFFdkIsSUFBSUEsaUJBQWlCYyxPQUFPO1lBQzFCLE9BQU9sQixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPLENBQUMsTUFBTSxFQUFFQSxNQUFNZSxPQUFPLENBQUMsQ0FBQztZQUFDO1FBQ2hFO1FBRUEsT0FBT25CLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFhO0lBQ3BEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95YXBpLXRvLXRzLWFwaS8uL3BhZ2VzL2FwaS9nZW5lcmF0ZS50cz8yNjVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcbmltcG9ydCB7IEFQSUdlbmVyYXRvciB9IGZyb20gJy4uLy4uL3NyYy9nZW5lcmF0b3InO1xuXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBhcGk6IHtcbiAgICBib2R5UGFyc2VyOiB7XG4gICAgICBzaXplTGltaXQ6ICcxbWInLFxuICAgIH0sXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XG4gIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogJ+WPquWFgeiuuFBPU1Tor7fmsYInIH0pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygn5pS25Yiw6K+35rGC5pWw5o2uOicsIHJlcS5ib2R5KTtcbiAgICBcbiAgICBjb25zdCB7IGJhc2VVcmwsIGludGVyZmFjZUlkLCBwYXRoLCB0b2tlbiB9ID0gcmVxLmJvZHk7XG5cbiAgICBpZiAoIWJhc2VVcmwgfHwgIWludGVyZmFjZUlkIHx8ICFwYXRoKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ+e8uuWwkeW/heimgeWPguaVsCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0UGF0aCA9ICcuL2dlbmVyYXRlZCc7XG5cbiAgICBjb25zdCBnZW5lcmF0b3IgPSBuZXcgQVBJR2VuZXJhdG9yKHtcbiAgICAgIGJhc2VVcmwsXG4gICAgICBpbnRlcmZhY2VJZCxcbiAgICAgIHBhdGgsXG4gICAgICB0b2tlbixcbiAgICAgIG91dHB1dFBhdGhcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdlbmVyYXRvci5nZW5lcmF0ZSgpO1xuICAgIFxuICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiByZXN1bHRcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCfnlJ/miJDlpLHotKU6JywgZXJyb3IpO1xuICAgIFxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogYOeUn+aIkOWksei0pTogJHtlcnJvci5tZXNzYWdlfWAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAn55Sf5oiQ5aSx6LSlOiDmnKrnn6XplJnor68nIH0pO1xuICB9XG59ICJdLCJuYW1lcyI6WyJBUElHZW5lcmF0b3IiLCJjb25maWciLCJhcGkiLCJib2R5UGFyc2VyIiwic2l6ZUxpbWl0IiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwiYmFzZVVybCIsImludGVyZmFjZUlkIiwicGF0aCIsInRva2VuIiwib3V0cHV0UGF0aCIsImdlbmVyYXRvciIsInJlc3VsdCIsImdlbmVyYXRlIiwic3VjY2VzcyIsImRhdGEiLCJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/generate.ts\n");

/***/ }),

/***/ "(api)/./src/config.ts":
/*!***********************!*\
  !*** ./src/config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig)\n/* harmony export */ });\nconst defaultConfig = {\n    outputPath: \"./generated\",\n    baseUrl: \"https://yapi.cht-group.net\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFlTyxNQUFNQSxnQkFBcUM7SUFDaERDLFlBQVk7SUFDWkMsU0FBUztBQUNYLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly95YXBpLXRvLXRzLWFwaS8uL3NyYy9jb25maWcudHM/ZDQxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIFlBUElDb25maWcge1xuICAvKiogWUFQSemhueebrueahOWfuuehgFVSTCAqL1xuICBiYXNlVXJsOiBzdHJpbmc7XG4gIC8qKiDpobnnm650b2tlbiAqL1xuICB0b2tlbj86IHN0cmluZztcbiAgLyoqIOaOpeWPo0lEICovXG4gIGludGVyZmFjZUlkOiBudW1iZXI7XG4gIC8qKiBNb2Nr5Zyw5Z2AICovXG4gIG1vY2tVcmw/OiBzdHJpbmc7XG4gIC8qKiBBUEnot6/lvoQgKi9cbiAgcGF0aDogc3RyaW5nO1xuICAvKiog6L6T5Ye655uu5b2VICovXG4gIG91dHB1dFBhdGg6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWc6IFBhcnRpYWw8WUFQSUNvbmZpZz4gPSB7XG4gIG91dHB1dFBhdGg6ICcuL2dlbmVyYXRlZCcsXG4gIGJhc2VVcmw6ICdodHRwczovL3lhcGkuY2h0LWdyb3VwLm5ldCdcbn07ICJdLCJuYW1lcyI6WyJkZWZhdWx0Q29uZmlnIiwib3V0cHV0UGF0aCIsImJhc2VVcmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/config.ts\n");

/***/ }),

/***/ "(api)/./src/generator.ts":
/*!**************************!*\
  !*** ./src/generator.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIGenerator: () => (/* binding */ APIGenerator)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config */ \"(api)/./src/config.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nclass APIGenerator {\n    constructor(config){\n        this.generatedTypes = new Set();\n        this.config = {\n            ..._config__WEBPACK_IMPORTED_MODULE_3__.defaultConfig,\n            ...config\n        };\n    }\n    async generate() {\n        try {\n            console.log(\"开始生成API文件\");\n            // 创建输出目录（如果不存在）\n            if (!fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(this.config.outputPath)) {\n                fs__WEBPACK_IMPORTED_MODULE_1___default().mkdirSync(this.config.outputPath, {\n                    recursive: true\n                });\n            }\n            // 获取接口详情\n            const apiDetail = await this.fetchAPIDetail();\n            console.log(\"接口详情获取成功，开始生成代码\");\n            // 生成类型定义和API请求代码\n            const typeDefinition = this.generateTypes(apiDetail);\n            const apiRequest = this.generateAPI(apiDetail);\n            console.log(\"代码生成成功\");\n            // 返回生成的代码\n            return {\n                typeDefinition,\n                apiRequest\n            };\n        } catch (error) {\n            console.error(\"生成失败:\", error);\n            throw error;\n        }\n    }\n    cleanGeneratedFiles() {\n        const typesPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(this.config.outputPath, \"types.ts\");\n        const apiPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(this.config.outputPath, \"api.ts\");\n        if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(typesPath)) {\n            fs__WEBPACK_IMPORTED_MODULE_1___default().unlinkSync(typesPath);\n            console.log(\"已删除旧的类型定义文件\");\n        }\n        if (fs__WEBPACK_IMPORTED_MODULE_1___default().existsSync(apiPath)) {\n            fs__WEBPACK_IMPORTED_MODULE_1___default().unlinkSync(apiPath);\n            console.log(\"已删除旧的API请求文件\");\n        }\n    }\n    async fetchAPIDetail() {\n        try {\n            console.log(\"开始获取接口详情，参数:\", {\n                baseUrl: this.config.baseUrl,\n                interfaceId: this.config.interfaceId,\n                token: this.config.token\n            });\n            // 确保baseUrl没有尾部斜杠\n            const baseUrl = this.config.baseUrl.endsWith(\"/\") ? this.config.baseUrl.slice(0, -1) : this.config.baseUrl;\n            // 构建API请求URL\n            const url = `${baseUrl}/api/interface/get?id=${this.config.interfaceId}${this.config.token ? `&token=${this.config.token}` : \"\"}`;\n            console.log(\"请求接口详情URL:\", url);\n            // 发送请求获取接口详情\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url);\n            console.log(\"接口详情响应状态:\", response.status);\n            if (response.status !== 200) {\n                throw new Error(`请求失败，状态码: ${response.status}`);\n            }\n            const { data } = response;\n            if (data.errcode !== 0) {\n                throw new Error(`获取接口详情失败: ${data.errmsg}`);\n            }\n            console.log(\"接口详情获取成功\");\n            // 使用配置中提供的路径\n            const apiPath = this.config.path;\n            console.log(\"使用API路径:\", apiPath);\n            return {\n                ...data.data,\n                path: apiPath\n            };\n        } catch (error) {\n            console.error(\"获取接口详情失败:\", error);\n            if (error instanceof Error) {\n                throw new Error(`获取接口详情失败: ${error.message}`);\n            }\n            throw new Error(\"获取接口详情失败\");\n        }\n    }\n    generateTypes(apiInterface) {\n        try {\n            console.log(\"开始生成类型定义\");\n            let content = `/**\n * 接口名称: ${apiInterface.title}\n * 接口路径: ${apiInterface.path}\n * 接口方法: ${apiInterface.method}\n */\n\n`;\n            // 生成请求参数类型\n            const requestTypeName = this.getTypeName(apiInterface.path, apiInterface.method, \"Request\");\n            let requestType = \"\";\n            // 处理请求体参数\n            if (apiInterface.req_body_type === \"json\" && apiInterface.req_body_other) {\n                try {\n                    console.log(\"解析请求体:\", typeof apiInterface.req_body_other);\n                    const reqBodyJson = typeof apiInterface.req_body_other === \"string\" ? JSON.parse(apiInterface.req_body_other) : apiInterface.req_body_other;\n                    console.log(\"请求体解析结果:\", {\n                        type: reqBodyJson.type,\n                        hasProperties: !!reqBodyJson.properties\n                    });\n                    if (reqBodyJson.type === \"object\" && reqBodyJson.properties) {\n                        requestType = this.generateTypeFromSchema(reqBodyJson, requestTypeName);\n                    } else {\n                        requestType = `export interface ${requestTypeName} {}\\n`;\n                    }\n                } catch (e) {\n                    console.error(\"解析请求体JSON失败:\", e);\n                    requestType = `export interface ${requestTypeName} {}\\n`;\n                }\n            }\n            // 如果没有请求体，则使用查询参数\n            if (!requestType && apiInterface.req_query && apiInterface.req_query.length > 0) {\n                requestType = `export interface ${requestTypeName} {\\n`;\n                apiInterface.req_query.forEach((param)=>{\n                    const required = param.required === \"1\" ? \"\" : \"?\";\n                    const type = this.getTypeFromProperty(param);\n                    requestType += `  /** ${param.desc || \"\"} */\\n`;\n                    requestType += `  ${param.name}${required}: ${type};\\n`;\n                });\n                requestType += \"}\\n\";\n            }\n            // 如果没有请求体和查询参数，则创建空接口\n            if (!requestType) {\n                requestType = `export interface ${requestTypeName} {}\\n`;\n            }\n            // 生成响应类型\n            const responseTypeName = this.getTypeName(apiInterface.path, apiInterface.method, \"Response\");\n            let responseType = \"\";\n            if (apiInterface.res_body_type === \"json\" && apiInterface.res_body) {\n                try {\n                    console.log(\"解析响应体:\", typeof apiInterface.res_body);\n                    const resBodyJson = typeof apiInterface.res_body === \"string\" ? JSON.parse(apiInterface.res_body) : apiInterface.res_body;\n                    console.log(\"响应体解析结果:\", {\n                        type: resBodyJson.type,\n                        hasProperties: !!resBodyJson.properties\n                    });\n                    if (resBodyJson.type === \"object\" && resBodyJson.properties) {\n                        // 处理标准响应结构\n                        responseType = this.generateTypeFromSchema(resBodyJson, responseTypeName);\n                        // 检查是否有data字段，并且data是对象类型\n                        if (resBodyJson.properties.data && resBodyJson.properties.data.type === \"object\") {\n                            console.log(\"检测到data字段是对象类型，生成Data接口\");\n                            // 为data字段生成单独的接口\n                            const dataTypeName = `${responseTypeName}Data`;\n                            const dataSchema = resBodyJson.properties.data;\n                            if (dataSchema.properties) {\n                                const dataType = this.generateTypeFromSchema({\n                                    type: \"object\",\n                                    properties: dataSchema.properties,\n                                    required: dataSchema.required\n                                }, dataTypeName);\n                                // 将data类型更新为具体的接口类型\n                                responseType = responseType.replace(/data\\?:\\s*Record<string,\\s*any>;/, `data?: ${dataTypeName};`);\n                                // 添加data接口定义\n                                responseType = dataType + \"\\n\" + responseType;\n                            }\n                        }\n                    } else {\n                        responseType = `export interface ${responseTypeName} {}\\n`;\n                    }\n                } catch (e) {\n                    console.error(\"解析响应体JSON失败:\", e);\n                    responseType = `export interface ${responseTypeName} {}\\n`;\n                }\n            } else {\n                responseType = `export interface ${responseTypeName} {}\\n`;\n            }\n            content += requestType + \"\\n\" + responseType;\n            console.log(\"类型定义生成成功\");\n            return content;\n        } catch (error) {\n            console.error(\"生成类型定义失败:\", error);\n            throw error;\n        }\n    }\n    generateAPI(apiInterface) {\n        try {\n            console.log(\"开始生成API请求函数\");\n            const functionName = this.getFunctionName(apiInterface.path, apiInterface.method);\n            const requestTypeName = this.getTypeName(apiInterface.path, apiInterface.method, \"Request\");\n            const responseTypeName = this.getTypeName(apiInterface.path, apiInterface.method, \"Response\");\n            const method = apiInterface.method.toLowerCase();\n            const path = apiInterface.path;\n            let content = `/**\n * ${apiInterface.title}\n * @description ${apiInterface.title}\n * @param data 请求参数\n * @returns Promise<${responseTypeName}>\n */\nexport function ${functionName}(data: ${requestTypeName}): Promise<${responseTypeName}> {\n  return request({\n    url: '${path}',\n    method: '${method}',\n    ${method.toLowerCase() === \"get\" ? \"params: data\" : \"data\"}\n  });\n}\n\n/**\n * 使用示例:\n * \n * import { ${functionName} } from './api';\n * \n * // 调用接口\n * const response = await ${functionName}({\n *   // 请求参数\n * });\n * console.log(response);\n */\n`;\n            console.log(\"API请求函数生成成功\");\n            return content;\n        } catch (error) {\n            console.error(\"生成API请求函数失败:\", error);\n            throw error;\n        }\n    }\n    getTypeFromQueryParam(param) {\n        switch(param.type){\n            case \"string\":\n                return \"string\";\n            case \"number\":\n            case \"integer\":\n                return param.example?.includes(\".\") ? \"number\" : \"number\";\n            case \"boolean\":\n                return \"boolean\";\n            default:\n                return \"string\";\n        }\n    }\n    getTypeFromProperty(prop) {\n        console.log(\"处理属性类型:\", prop);\n        // 处理YAPIParameter类型\n        if (\"name\" in prop) {\n            const type = prop.type?.toLowerCase() || \"string\";\n            if (type === \"text\" || type === \"文本\") {\n                return \"string\";\n            }\n            if (type === \"integer\" || type === \"number\") {\n                return \"number\";\n            }\n            if (type === \"boolean\") {\n                return \"boolean\";\n            }\n            return \"string\";\n        }\n        // 处理JSONSchemaProperty类型\n        const type = prop.type?.toLowerCase();\n        if (!type) {\n            return \"any\";\n        }\n        if (type === \"text\" || type === \"文本\") {\n            return \"string\";\n        }\n        if (type === \"string\") {\n            return \"string\";\n        }\n        if (type === \"integer\" || type === \"number\") {\n            // 处理特殊格式\n            if (prop.format === \"int64\") {\n                return \"bigint\";\n            }\n            if (prop.format === \"int32\" || prop.format === \"int\") {\n                return \"number\";\n            }\n            return \"number\";\n        }\n        if (type === \"boolean\") {\n            return \"boolean\";\n        }\n        if (type === \"array\" && prop.items) {\n            if (typeof prop.items === \"object\") {\n                // 处理数组项是对象的情况\n                if (prop.items.type === \"object\" && prop.items.properties) {\n                    return \"Record<string, any>[]\";\n                }\n                const itemType = this.getTypeFromProperty(prop.items);\n                return `${itemType}[]`;\n            }\n            return \"any[]\";\n        }\n        if (type === \"object\") {\n            if (prop.properties) {\n                // 这里我们不直接生成嵌套类型，而是在generateTypeFromSchema中处理\n                return \"Record<string, any>\";\n            }\n            return \"Record<string, any>\";\n        }\n        console.log(\"未知类型:\", type);\n        return \"any\";\n    }\n    generateTypeFromSchema(schema, typeName) {\n        console.log(\"生成类型定义:\", {\n            typeName,\n            schemaType: schema.type\n        });\n        if (schema.type !== \"object\" || !schema.properties) {\n            return `export interface ${typeName} {}\\n`;\n        }\n        let content = `export interface ${typeName} {\\n`;\n        // 处理所有属性\n        for (const [key, prop] of Object.entries(schema.properties)){\n            const required = schema.required?.includes(key) ? \"\" : \"?\";\n            let type = \"\";\n            // 处理嵌套对象\n            if (prop.type === \"object\" && prop.properties) {\n                // 为嵌套对象创建子接口\n                const nestedTypeName = `${typeName}${this.capitalizeFirst(key)}`;\n                const nestedType = this.generateNestedType(prop, nestedTypeName);\n                // 添加子接口定义\n                content = nestedType + \"\\n\" + content;\n                type = nestedTypeName;\n            } else {\n                type = this.getTypeFromProperty(prop);\n            }\n            const description = prop.description ? `/** ${prop.description} */\\n  ` : \"\";\n            content += `  ${description}${key}${required}: ${type};\\n`;\n        }\n        content += \"}\\n\";\n        return content;\n    }\n    generateNestedType(schema, typeName) {\n        console.log(\"生成嵌套类型:\", {\n            typeName,\n            schemaType: schema.type\n        });\n        if (schema.type !== \"object\" || !schema.properties) {\n            return `export interface ${typeName} {}\\n`;\n        }\n        let content = `export interface ${typeName} {\\n`;\n        // 处理所有属性\n        for (const [key, prop] of Object.entries(schema.properties)){\n            const required = schema.required?.includes(key) ? \"\" : \"?\";\n            let type = \"\";\n            // 处理嵌套对象\n            if (prop.type === \"object\" && prop.properties) {\n                // 为嵌套对象创建子接口\n                const nestedTypeName = `${typeName}${this.capitalizeFirst(key)}`;\n                const nestedType = this.generateNestedType(prop, nestedTypeName);\n                // 添加子接口定义\n                content = nestedType + \"\\n\" + content;\n                type = nestedTypeName;\n            } else {\n                type = this.getTypeFromProperty(prop);\n            }\n            const description = prop.description ? `/** ${prop.description} */\\n  ` : \"\";\n            content += `  ${description}${key}${required}: ${type};\\n`;\n        }\n        content += \"}\\n\";\n        return content;\n    }\n    capitalizeFirst(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    getTypeName(path, method, suffix) {\n        // 移除开头的斜杠，然后按斜杠分割\n        const parts = path.replace(/^\\/+/, \"\").split(\"/\");\n        // 将路径部分转换为大驼峰格式\n        const typeParts = parts.map((part)=>{\n            // 处理带连字符的部分\n            return part.split(/[-_]/).map((s)=>s.charAt(0).toUpperCase() + s.slice(1)).join(\"\");\n        });\n        // 组合最终的类型名\n        const typeName = typeParts.join(\"\") + method.charAt(0).toUpperCase() + method.slice(1).toLowerCase() + suffix;\n        console.log(\"生成类型名称:\", {\n            path,\n            method,\n            suffix,\n            typeName\n        });\n        return typeName;\n    }\n    getFunctionName(path, method) {\n        // 移除开头的斜杠，然后按斜杠分割\n        const parts = path.replace(/^\\/+/, \"\").split(\"/\");\n        // 将路径部分转换为驼峰格式\n        const nameParts = parts.map((part, index)=>{\n            // 处理带连字符的部分\n            const words = part.split(/[-_]/);\n            return words.map((word, wordIndex)=>{\n                // 如果是第一个部分的第一个词，保持小写\n                if (index === 0 && wordIndex === 0) {\n                    return word.toLowerCase();\n                }\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }).join(\"\");\n        });\n        // 组合最终的函数名\n        const functionName = method.toLowerCase() + nameParts.join(\"\");\n        console.log(\"生成函数名称:\", {\n            path,\n            method,\n            functionName\n        });\n        return functionName;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/generator.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fgenerate&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fgenerate.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();